class Solution {
    public int[][] merge(int[][] intervals) {
        int n=intervals.length;
        Arrays.sort(intervals,Comparator.comparingDouble(o->o[0]));
        List<List<Integer>> ans=new ArrayList<>();
        
        // for(int i=0;i<n;i++)             1st method
        // {
        //     int start=intervals[i][0];
        //     int end=intervals[i][1];
        //     if(ans.size()>0 && end<=ans.get(ans.size()-1).get(1))
        //     {
        //         continue;
        //     }
        //     for(int j=i+1;j<n;j++)
        //     {
        //         if(intervals[j][0]<=end)
        //         {
        //             end=Math.max(end,intervals[j][1]);
        //         }
        //         else break;
        //     }
        //     List<Integer> l=new ArrayList<>();
        //     l.add(start);
        //     l.add(end);
        //     ans.add(new ArrayList<>(l));
        // }

        for(int i=0;i<n;i++)           // 2nd method
        {
            if(ans.size()==0 || intervals[i][0]>ans.get(ans.size()-1).get(1))
            {
                List<Integer> l=new ArrayList<>();
                l.add(intervals[i][0]);
                l.add(intervals[i][1]);
                ans.add(new ArrayList<>(l));
            }
            else
            {
                ans.get(ans.size()-1).set(1,Math.max(ans.get(ans.size()-1).get(1),intervals[i][1]));
            }
        }

        int arr[][]=new int[ans.size()][2];
        for(int i=0;i<arr.length;i++)
        {
            arr[i][0]=ans.get(i).get(0);
            arr[i][1]=ans.get(i).get(1);
        }
        
        return arr;
    }
}
