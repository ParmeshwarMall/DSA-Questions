class Solution {
    // arr[]: Input Array
    // N : Size of the Array arr[]
    // Function to count inversions in the array.
    static long count=0;
    static void merge(long arr[],int l,int mid,int r)
    {
        int n=mid-l+1;
        int m=r-mid;
        long left[]=new long[n];
        long right[]=new long[m];
        for(int i=0;i<n;i++)
        {
            left[i]=arr[l+i];
        }
        for(int i=0;i<m;i++)
        {
            right[i]=arr[mid+1+i];
        }
        int k=l;
        int i=0;
        int j=0;
        while(i<n && j<m)
        {
            if(left[i]<=right[j])
            {
                arr[k++]=left[i++];
            }
            else 
            {
                count+=(n-i);
                arr[k++]=right[j++];
            }
        }
        while(i<n)
        {
            arr[k++]=left[i++];
        }
        while(j<m)
        {
            arr[k++]=right[j++];
        }
    }
    
    static void mergeSort(long []arr,int l,int r)
    {
        if(l>=r) return;
        int mid=(l+r)/2;
        mergeSort(arr,l,mid);
        mergeSort(arr,mid+1,r);
        merge(arr,l,mid,r);
    }
    static long inversionCount(long arr[]) {
        // Your Code Here
        count=0;
        mergeSort(arr,0,arr.length-1);
        return count;
    }
}
