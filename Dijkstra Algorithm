class Solution
{
    //Function to find the shortest distance of all the vertices
    //from the source vertex S.
    public static class Edge{
        int src;
        int dest;
        int wt;
        
        public Edge(int s,int d,int wt)
        {
            this.src=s;
            this.dest=d;
            this.wt=wt;
        }
    }
    static void createGraph(ArrayList<ArrayList<ArrayList<Integer>>> adj,ArrayList<Edge>[] graph)
    {
        for(int i=0;i<graph.length;i++)
        {
            graph[i]=new ArrayList<>();
        }
        for(int i=0;i<adj.size();i++)
        {
            for(int j=0;j<adj.get(i).size();j++)
            {
                int dest=adj.get(i).get(j).get(0);
                int wt=adj.get(i).get(j).get(1);
                graph[i].add(new Edge(i,dest,wt));
            }
        }
    }
    public static class Pair implements Comparable<Pair>{
        int n;
        int path;
        
        public Pair(int n,int p)
        {
            this.n=n;
            this.path=p;
        }
        @Override
        public int compareTo(Pair p2)
        {
            return this.path-p2.path;
        }
    }
    static int[] dijkstra(int V, ArrayList<ArrayList<ArrayList<Integer>>> adj, int S)
    {
        ArrayList<Edge>[] graph=new ArrayList[V];
        createGraph(adj,graph);
        
        int []dist=new int[V];
        for(int i=0;i<V;i++)
        {
            if(i!=S)
            {
                dist[i]=Integer.MAX_VALUE;
            }
        }
        
        boolean isVis[]=new boolean[V];
        PriorityQueue<Pair>pq=new PriorityQueue<>();
        pq.add(new Pair(S,0));
        
        while(pq.size()!=0)
        {
            Pair curr=pq.remove();
            if(!isVis[curr.n])
            {
                isVis[curr.n]=true;
            }
            for(int i=0;i<graph[curr.n].size();i++)
            {
                Edge e=graph[curr.n].get(i);
                int u=e.src;
                int v=e.dest;
                int wt=e.wt;
                
                if(dist[u]+wt<dist[v])
                {
                    dist[v]=dist[u]+wt;
                    pq.add(new Pair(v,dist[v]));
                }
            }
        }
        return dist;
    }
}

